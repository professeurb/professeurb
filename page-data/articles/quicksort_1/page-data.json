{"componentChunkName":"component---src-components-article-layout-js","path":"/articles/quicksort_1/","webpackCompilationHash":"26e53f1a05074416306d","result":{"data":{"mdx":{"id":"60e513c8-77bb-58c0-abe1-bcc6848793d3","frontmatter":{"title":"Le Problème avec QuickSort, partie 1","subtitle":"Où l'on explore quelques éléments délicats concernant QuickSort…","tags":["Tris","IPT Spé"]},"fields":{"slug":"/articles/quicksort_1/"},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Le Problème avec QuickSort, partie 1\",\n  \"subtitle\": \"Où l'on explore quelques éléments délicats concernant QuickSort…\",\n  \"tags\": [\"Tris\", \"IPT Spé\"],\n  \"date\": \"2019-09-06\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"L'algorithme de \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://fr.wikipedia.org/wiki/Tri_rapide\"\n  }), \"tri rapide\"), \", ou \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Quicksort\"\n  }), \"Quicksort\"), \", figure au programme d'\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Informatique pour tous\"), \", le cours commun d'informatique des classes pr\\xE9paratoires scientifiques en deuxi\\xE8me ann\\xE9e. Or, pour ce cours, le langage de r\\xE9f\\xE9rence est Python\\u2026 et il est vraiment difficile de montrer avec ce langage \\xE0 quel point cet algorithme est int\\xE9ressant.\"), mdx(\"h1\", null, \"Pr\\xE9sentation du probl\\xE8me\"), mdx(\"p\", null, \"L'id\\xE9e de base de Quicksort est tr\\xE8s simple\", \"\\xA0\", \": pour trier une liste \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"l\"), \", il suffit de prendre un \\xE9l\\xE9ment \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"p\"), \" de la liste (que l'on appelle le \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pivot\"), \"), s\\xE9lectionner les \\xE9l\\xE9ments de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"l\"), \" plus petits que \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"p\"), \" et les trier, s\\xE9lectionner ceux qui sont plus grands et les trier\\u2026 et tout remettre dans l'ordre.\"), mdx(\"p\", null, \"Ainsi, pour trier la liste \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"]\"), \", on d\\xE9finit\\nle pivot comme le premier \\xE9l\\xE9ment de la liste\", \"\\xA0\", \": \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3\"), \" et on s\\xE9pare le reste en deux sous-listes\", \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-python\"\n  }), \"plus_petit = [\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"2\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"]\\nplus_grand = [\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"7\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"4\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"5\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"6\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"9\"), \"]\\n\")), mdx(\"p\", null, \"Ensuite, on trie \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \" et \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"d\"), \" et on retourne la liste\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-python\"\n  }), \"plus_petit_trie + [pivot] + plus_grand_trie\\n\")), mdx(\"p\", null, \"Comment fait-on pour trier les sous-listes\", \"\\xA0\", \"? En rappelant l'algorithme, sachant qu'une liste de longueur\", \"\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1\"), \" est d\\xE9j\\xE0 tri\\xE9e.\"), mdx(\"p\", null, \"Cela donne l'algorithme suivant\", \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-python\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"def\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"pseudo_quicksort\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(l)\"), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" len(l) <= \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \":\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" l \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# la liste est d\\xE9j\\xE0 tri\\xE9e\"), \"\\n    pivot = l[\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"]\\n    plus_petit = []\\n    plus_grand = []\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" e \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" l[\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \":]:\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" e <= pivot:\\n            plus_petit.append(e)\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \":\\n            plus_grand.append(e)\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" pseudo_quicksort(plus_petit) \\\\\\\\\\n        + [pivot] + pseudo_quicksort(plus_grand)\\n\")), mdx(\"p\", null, \"Quel est le probl\\xE8me\", \"\\xA0\", \"? Cet algorithme est correct, il trie bien une liste, est plut\\xF4t rapide et respecte l'id\\xE9e derri\\xE8re Quicksort. Mais c'est une version tr\\xE8s na\\xEFve et d\\xE9natur\\xE9e de Quicksort. On a le \\xAB\", \"\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"sort\"), \"\\xA0\", \"\\xBB, mais pas vraiment le \\xAB\", \"\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"quick\"), \"\\xA0\", \"\\xBB. En particulier, cette fonction passe son temps \\xE0 dupliquer des donn\\xE9es, \\xE0 cr\\xE9er de nouvelles listes, etc., ce que ne fait pas le \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"v\\xE9ritable\"), \" algorithme Quicksort.\"), mdx(\"p\", null, \"Au contraire, le \\xAB\", \"\\xA0\", \"vrai\", \"\\xA0\", \"\\xBB Quicksort effectue un tri \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"en place\"), \" (c.\\xE0.d. il modifie le tableau plut\\xF4t que d'en cr\\xE9er un nouveau) et la seule m\\xE9moire suppl\\xE9mentaire qu'il utilise est pour la pile d'appel lors de la r\\xE9cursion (de taille logarithmique par rapport \\xE0 la taille de liste, donc quasiment n\\xE9gligeable). Et il est vraiment tr\\xE8s rapide.\"), mdx(\"p\", null, \"Dans la version originale de Hoare, en choisissant toujours comme pivot le premier \\xE9l\\xE9ment de la liste, on a deux pointeurs qui se d\\xE9placent, l'un \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \" de gauche \\xE0 droite en s'assurant que les \\xE9l\\xE9ments le pr\\xE9c\\xE9dant sont plus petits que le pivot, et un autre \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"j\"), \" de droite \\xE0 gauche avec tous les \\xE9l\\xE9ments le suivant strictement plus grands que le pivot\", \"\\xA0\", \":\"), mdx(Center, {\n    mdxType: \"Center\"\n  }, mdx(Figure, {\n    mdxType: \"Figure\"\n  })), mdx(\"p\", null, \"Et lorsqu'il y a un probl\\xE8me, si \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \" pointe sur un \\xE9l\\xE9ment strictement plus grand que le pivot et \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"j\"), \" pointe sur un \\xE9l\\xE9ment plus petit, on les \\xE9change, et on peut avancer.\"), mdx(\"p\", null, \"Quel est le probl\\xE8me, donc\", \"\\xA0\", \"? C'est qu'il est assez difficile de montrer que la \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"bonne\"), \" version est vraiment meilleure que la \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mauvaise\"), \" en Python, puisque que le code de la fonction \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \" ci-dessus est (l\\xE9g\\xE8rement) plus rapide que le code \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"propre\"), \" (et tr\\xE8s comment\\xE9, peut-\\xEAtre un peu trop, mais les invariants de boucles permettent de v\\xE9rifier facilement la correction de l'impl\\xE9mentation) de Quicksort\", \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-python\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"def\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"quicksort\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(l)\"), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"def\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"aux\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(debut, fin)\"), \" :\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# Si debut <= fin + 1, la liste est de longueur au plus 1,\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# elle est d\\xE9j\\xE0 tri\\xE9e.\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" fin <= debut + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \":\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# On choisit le pivot,\"), \"\\n        pivot = l[debut]\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# Puis on va partager le reste de la liste\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# par rapport \\xE0 ce pivot.\"), \"\\n        i = debut + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"\\n        j = fin - \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"True\"), \":\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# Invariant de boucle\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 1. debut < i, j < fin et i <= j + 1\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 2. si debut < k < i alors l[k] <= pivot\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 3. si j < k < fin alors pivot <= l[k]\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" i <= j \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"and\"), \" l[i] <= pivot:\\n                i += \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# en sortie de boucle, on a\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 1. soit i == j + 1\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 2. soit i <= j et l[i] > pivot\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" i <= j \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"and\"), \" l[j] > pivot:\\n                j -= \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# de m\\xEAme, en sortie de boucle, on a\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 1. soit i == j + 1\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 2. soit i <= j et l[j] <= pivot\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# En conclusion, deux cas sont possibles ici :\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 1. i == j + 1\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 2. i <= j et l[j] <= pivot < l[i]\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# Dans le premier cas, on a fini de trier\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (i > j):\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"break\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# Sinon, on a donc l[j] <= pivot < l[i]\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"#   et donc i < j\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# On \\xE9change les deux \\xE9l\\xE9ments :\"), \"\\n            l[i], l[j] = l[j], l[i]\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# et on continue\"), \"\\n            i += \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"\\n            j -= \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# On a maintenant\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 1. i == j + 1\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 2. debut < k <= j => l[k] <= pivot\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 3. i <= k < fin => l[k] > pivot\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# On mets le pivot \\xE0 sa place\"), \"\\n        l[debut], l[j] = l[j], l[debut]\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# et on trie les deux c\\xF4t\\xE9s s\\xE9par\\xE9ment.\"), \"\\n        aux(debut, j)\\n        aux(i, fin)\\n    aux(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \", len(l))\\n\")), mdx(\"h1\", null, \"V\\xE9rification du probl\\xE8me\"), mdx(\"p\", null, \"Pour v\\xE9rifier que la \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mauvaise\"), \" version est plus rapide que la \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"bonne\"), \", comparons les temps mis par les deux fonctions.\"), mdx(\"p\", null, \"Pour cela, nous allons utiliser la fonction interm\\xE9diaire suivante\", \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-python\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"def\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"chrono\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(n, f)\"), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# on trie f fois une liste de n \\xE9l\\xE9ments\"), \"\\n    t1 = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.0\"), \"\\n    t2 = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.0\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" _ \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" range(f):\\n        l1 = [random.random() \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" _ \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" range(n)]\\n        l2 = l1[:] \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# on duplique la liste\"), \"\\n        t1 -= time.time()\\n        _ = pseudo_quicksort(l1)\\n        t1 += time.time()\\n        t2 -= time.time()\\n        _ = quicksort(l2)\\n        t2 += time.time()\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" t1 / f, t2 / f\\n\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Nombre d'\\xE9l\\xE9ments\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Temps \", mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"t\")), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Temps \", mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"t\")))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"100\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"0.00012\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"0.00011\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"1000\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"0.00169\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"0.00184\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"10000\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"0.02376\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"0.02676\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"100000\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"0.29259\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"0.32532\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"1000000\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"3.97823\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"4.01646\")))), mdx(\"p\", null, \"\\xC0 chaque fois, si les temps mis sont comparables, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \" est en g\\xE9n\\xE9ral plus rapide que \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \".\"), mdx(\"h2\", null, \"Un autre comparatif\"), mdx(\"p\", null, \"Comparons maintenant les temps d'ex\\xE9cutions avec une impl\\xE9mentation plus s\\xE9rieuse, en r\\xE9it\\xE9rant l'exp\\xE9rience en langage C++. Voici tout d'abord le code de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-c++\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"std\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"vector\"), \"<\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \"> pseudo_quicksort(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"std\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"vector\"), \"<\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \"> l) {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (l.size() <= \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \") {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" l;\\n  }\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" pivot = l[\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"];\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"std\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"vector\"), \"<\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \"> plus_petit, plus_grand;\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"auto\"), \" it = l.begin() + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \" ; it != l.end(); ++it) {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (*it <= pivot) {\\n      plus_petit.push_back(*it);\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n      plus_grand.push_back(*it);\\n    }\\n  }\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// On trie plus_petit et plus_grand\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"std\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"vector\"), \"<\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \"> r = pseudo_quicksort(plus_petit);\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"std\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"vector\"), \"<\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \"> r2 = pseudo_quicksort(plus_grand);\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// On reconstruit le r\\xE9sultat final...\"), \"\\n  r.push_back(pivot);\\n  r.insert(r.end(), r2.begin(), r2.end());\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ... avant de le renvoyer.\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" r;\\n}\\n\")), mdx(\"p\", null, \"Voici maintenant le code de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-c++\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"quicksort_aux\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" l[], \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" debut, \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" fin)\"), \" \"), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (fin <= debut + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \")\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" pivot = l[debut];\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" i = debut + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \", j = fin - \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \";\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"true\"), \") {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" (i <= j && l[i] <= pivot) {\\n      i += \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \";\\n    }\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" (i <= j && l[j] > pivot) {\\n      j -= \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \";\\n    }\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (i > j) {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"break\"), \";\\n    }\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" tmp = l[i];\\n    l[i] = l[j];\\n    l[j] = tmp;\\n    i += \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \";\\n    j -= \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \";\\n  }\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" tmp = l[debut];\\n  l[debut] = l[j];\\n  l[j] = tmp;\\n  quicksort_aux(l, debut, j);\\n  quicksort_aux(l, i, fin);\\n}\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"quicksort\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"std\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"vector\"), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \"> l)\"), \" \"), \"{\\n  quicksort_aux(l.data(), \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \", l.size());\\n}\\n\")), mdx(\"p\", null, \"Ce sont des traductions directes des codes Python pr\\xE9c\\xE9dents. En triant une liste de 1000000 entiers, j'obtiens le r\\xE9sultat suivant\", \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-angelscript\"\n  }), \"clock resolution: mean \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"is\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"47.536\"), \" ns (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"10240002\"), \" iterations)\\n\\nbenchmarking pseudo_quicksort\\ncollecting \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \" samples, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \" iterations each, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" estimated \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"85.2807\"), \" s\\nmean: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"854.245\"), \" ms, lb \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"847.087\"), \" ms, ub \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"862.863\"), \" ms, ci \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.95\"), \"\\nstd dev: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"39.8463\"), \" ms, lb \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"33.4953\"), \" ms, ub \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"50.2214\"), \" ms, ci \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.95\"), \"\\nfound \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"5\"), \" outliers among \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \" samples (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"5\"), \"%)\\nvariance \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"is\"), \" moderately inflated by outliers\\n\\nbenchmarking quicksort\\ncollecting \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \" samples, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \" iterations each, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" estimated \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"626.126\"), \" ms\\nmean: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"6.3364\"), \" ms, lb \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"6.26806\"), \" ms, ub \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"6.42072\"), \" ms, ci \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.95\"), \"\\nstd dev: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"386.494\"), \" \\u03BCs, lb \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"322.376\"), \" \\u03BCs, ub \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"493.992\"), \" \\u03BCs, ci \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.95\"), \"\\nfound \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"4\"), \" outliers among \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \" samples (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"4\"), \"%)\\nvariance \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"is\"), \" severely inflated by outliers\\n\")), mdx(\"p\", null, \"Ce que l'on peut y lire, c'est que la version \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \" mets en moyenne 6.3364\", \"\\xA0\", \"ms alors que la version \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \" mets quand \\xE0 elle... 854.245\", \"\\xA0\", \"ms.\"), mdx(\"p\", null, \"Cette diff\\xE9rence cons\\xE9quente rends bien mieux compte de la diff\\xE9rence entre \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \" qui est un mod\\xE8le d'efficacit\\xE9, et \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \" qui est un mod\\xE8le d'inefficacit\\xE9.\"), mdx(\"h2\", null, \"Utilisation m\\xE9moire\"), mdx(\"p\", null, \"Une autre grande diff\\xE9rence entre les deux fonctions r\\xE9side dans l'utilisation de la m\\xE9moire. Pour \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \", de nombreuses listes vont \\xEAtre cr\\xE9\\xE9es, ce qui implique une consommation importante de m\\xE9moire.\"), mdx(\"p\", null, \"\\xC0 l'inverse, si l'on ne tient pas compte de l'espace de pile utilis\\xE9 pour les appels r\\xE9cursifs, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \" n\\xE9cessite une taille m\\xE9moire constante pour s'ex\\xE9cuter.\"), mdx(\"p\", null, \"Il est possible d'illustrer cela \\xE0 l'aide de la fonction \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"e\"), \" du module \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://pypi.python.org/pypi/memory_profiler\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"r\")), \", en proc\\xE9dant par exemple ainsi\", \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-python\"\n  }), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# on d\\xE9finit les m\\xE9thodes de tri\"), \"\\n...\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# on d\\xE9finit la fonction que l'on veut profiler\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \"@profile\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"def\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"test\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"()\"), \":\"), \"\\n    l1 = [random.random() \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" _ \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" range(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"10000\"), \")]\\n    l2 = l1[:]\\n    gc.collect()\\n    gc.disable()\\n    _ = qs(l1)\\n    gc.collect()\\n    gc.disable()\\n    quicksort(l2)\\n\\ntest()\\n\")), mdx(\"p\", null, \"Les commandes du module \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \" permettent de nettoyer la m\\xE9moire avant l'appel aux fonctions de tri. La consommation m\\xE9moire vient alors exclusivement de ces fonctions.\"), mdx(\"p\", null, \"Si l'on note \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \" ce fichier, en ex\\xE9cutant dans un \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"shell\"), \" la commande\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-shell\"\n  }), \"python3 -m memory_profiler test.py\\n\")), mdx(\"p\", null, \"on obtient un affichage de type\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-http\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attribute\"\n  }), \"Filename\"), \": d3.py\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"angelscript\"\n  }), \"Line #    Mem usage    Increment   Line Contents\\n================================================\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"43\"), \"   \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"28.152\"), \" MiB   \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"28.152\"), \" MiB   @profile\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"44\"), \"                             def truc():\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"45\"), \"   \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"35.156\"), \" MiB    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.699\"), \" MiB       l1 = [random.random() \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" _ \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" range(...\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"46\"), \"   \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"35.922\"), \" MiB    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.766\"), \" MiB       l2 = l1.copy()\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"47\"), \"   \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"35.922\"), \" MiB    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.000\"), \" MiB       gc.collect()\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"48\"), \"   \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"35.922\"), \" MiB    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.000\"), \" MiB       gc.disable()\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"49\"), \"   \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"38.852\"), \" MiB    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"2.930\"), \" MiB       _ = pseudo_quicksort(l1)\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"50\"), \"   \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"38.852\"), \" MiB    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.000\"), \" MiB       gc.collect()\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"51\"), \"   \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"38.852\"), \" MiB    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.000\"), \" MiB       gc.disable()\\n    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"52\"), \"   \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"38.852\"), \" MiB    \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.000\"), \" MiB       quicksort(l2)\\n\"))), mdx(\"p\", null, \"On voit que l'ex\\xE9cution de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \" a n\\xE9cessit\\xE9 2.930 MiB de m\\xE9moire suppl\\xE9mentaire, alors que \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \" en a n\\xE9cessit\\xE9 0.000 MiB.\"), mdx(\"p\", null, \"Le table suivant indique diverses mesures de consommation m\\xE9moire en fonction de la taille de la liste \\xE0 trier.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Nombre d'\\xE9l\\xE9ments\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"Conso. \", mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"t\")), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"Conso. \", mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"t\")))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"1000\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"0.012 MiB\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"0.000 MiB\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"10000\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"0.504 MiB\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"0.000 MiB\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"100000\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"2.582 MiB\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"0.000 MiB\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"1000000\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"12.539 MiB\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"0.000 MiB\")))), mdx(\"p\", null, \"Comme on le voit, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \" est tr\\xE8s consommateur alors qu'au contraire, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \" est tr\\xE8s \\xE9conome. Bien s\\xFBr, dans le premier cas, la consommation de m\\xE9moire, d\\xFBe \\xE0 d'incessantes duplications de portions de listes, a un co\\xFBt temporel important qui est clairement visible pour le programme en C++ mais est totalement occult\\xE9 en Python.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Comme on vient de le voir, le tri rapide est un algorithme de tri extr\\xE8mement rapide et tr\\xE8s peu consommateur de m\\xE9moire. Le tri est effectu\\xE9 en place, et chaque \\xE9l\\xE9ment de la liste effectu\\xE9 un nombre tr\\xE8s faible de d\\xE9placements avant d'arriver \\xE0 la bonne place.\"), mdx(\"p\", null, \"Il est vraiment dommage de le confondre avec la m\\xE9thode illustr\\xE9e par \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \" (on choist un \\xE9l\\xE9ment, on mets les \\xE9l\\xE9ments plus petits devant et les autre derri\\xE8re et on recommence) qui est, certes, une m\\xE9thode de tri mais refl\\xE8te une approche tr\\xE8s na\\xEFve de la programmation et ne tient absolument pas compte de questions comme comment repr\\xE9senter et manipuler efficacement les donn\\xE9es. Ce n'est gu\\xE8re plus que l'id\\xE9e d'un algorithme.\"), mdx(\"p\", null, \"Il reste un probl\\xE8me important concernant l'algorithme \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"t\"), \", c'est qu'il a une complexit\\xE9 en \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"inlineMath\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", {\n    parentName: \"span\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"msup\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", {\n    parentName: \"msup\"\n  }, \"n\"), mdx(\"mn\", {\n    parentName: \"msup\"\n  }, \"2\")), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"&#123;`O(n^2)`&#125;\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1.064108em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }), \"O\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"n\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.8141079999999999em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-3.063em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), \"2\")))))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\"))))), \" dans le pire des cas. Dans un \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../quicksort_2\"\n  }), \"prochain article\"), \", nous allons pr\\xE9senter quelques id\\xE9es pour r\\xE9soudre ce grave probl\\xE8me, sous la forme d'un autre algorithme de tri en place de complexit\\xE9 optimale (en \", mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"inlineMath\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", {\n    parentName: \"span\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"ln\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"\\u2061\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"&#123;`O(n \\\\\\\\ln n)`&#125;\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }), \"O\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"n\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mop\"\n  }), \"ln\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.16666666666666666em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathdefault\"\n  }), \"n\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\"))))), \" dans le pire des cas) et de modification de Quicksort pour assurer cette complexit\\xE9 optimale.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"60e513c8-77bb-58c0-abe1-bcc6848793d3"}}}